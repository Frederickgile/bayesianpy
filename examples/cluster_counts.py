import pandas as pd
import bayesianpy
from bayesianpy.network import Builder as builder

import logging
import os

import matplotlib.pyplot as plt

# Demonstrates one-class classification/ unsupervised clustering to identify the likelihood that a sample has been
# generated by the particular model. Useful for building a model of normality and automatically identifying abnormal
# data.

def main():

    logger = logging.getLogger()
    
    bayesianpy.jni.attach(logger)

    db_folder = bayesianpy.utils.get_path_to_parent_dir(__file__)
    iris = pd.read_csv(os.path.join(db_folder, "data/iris.csv"), index_col=False)

    analysis = bayesianpy.analysis.LogLikelihoodAnalysis(logger)
    results = analysis.analyse(iris, [bayesianpy.template.MixtureNaiveBayes(logger,
                                                 discrete=iris[['iris_class']],
                                                 continuous=iris[['sepal_length', 'petal_width', 'petal_length', 'sepal_width']],
                                                 latent_states=i) for i in range(1, 20)],
                               use_model_names=False,
                               names=list(range(1,20)))

    plt.figure()

    plt.plot(results.columns.tolist(), results.mean().tolist(), 'bo')
    plt.tight_layout()
    plt.show()

if __name__ == "__main__":
    main()